<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>刻晴-Ai绘画</title>
      <link href="/2023/07/20/wallpaper5/"/>
      <url>/2023/07/20/wallpaper5/</url>
      
        <content type="html"><![CDATA[<h1 id="刻晴"><a href="#刻晴" class="headerlink" title="刻晴"></a>刻晴</h1><p>模型：Counterfeit-V3.0.safetensors</p><p>vae：Counterfeit-V2.5.vae.pt</p><p>正向提示词：</p><p>[(Transparent background:1.5)::5],(((masterpiece))),(((best quality))),(((extremely detailed))),illustration, 1girl,solo,mysterious,vivid color,shiny, underwater transparent sealed hemispherical glass dome, (white hair),(purple eyes), full body,barefoot,long hair tranquil nature, koi,Underwater, Dome,close up,Dynamic actions,Lens perspective,(((Box composition))),<a href="lora:keqing_lion_optimizer_dim64_loraModel_5e-3noise_token1_4-3-2023:0.7">lora:keqing_lion_optimizer_dim64_loraModel_5e-3noise_token1_4-3-2023:0.7</a>, large breasts,nfs,sexy, perfect body,sit cross-legged and lean against the bookshel, volumetric lighting, multi-color eyes, detailed eyes, hyper detailed,light smile, highly detailed, beautiful, small details, ultra detailed, best quality, intricate, 4k, 8k, trending on artstation, good anatomy, beautiful lighting, award-winning,solo, purple hair, dress, long hair, hair bun, twintails, breasts, bare shoulders, purple eyes, strapless, black dress, bangs, purple nails, strapless dress, cone hair bun, nail polish, ribbon, parted lips, double bun, diamond-shaped pupils, symbol-shaped pupils, cleavage, bow, hair ribbon, diamond (shape), detached collar, hair ornament,symatic dress,</p><p>反向提示词：</p><p>(worst quality, low quality:1.4), monochrome, zombie, (interlocked fingers),</p><p>迭代步数：25</p><p>采样方法：DPM++ 2M Karras</p><p>CFG Scale：7.5</p><p>样图：</p><p><img src="https://bu.dusays.com/2023/07/20/64b8e87ad0607.png" alt="00012-854785743-[(Transparent background_1.5)__5],(((masterpiece))),(((best quality))),(((extremely detailed))),illustration, 1girl,solo,mysteri.png"><br><img src="https://bu.dusays.com/2023/07/20/64b8e87ad26e4.png" alt="00013-854785744-[(Transparent background_1.5)__5],(((masterpiece))),(((best quality))),(((extremely detailed))),illustration, 1girl,solo,mysteri.png"><br><img src="https://bu.dusays.com/2023/07/20/64b8e87acf030.png" alt="00014-854785745-[(Transparent background_1.5)__5],(((masterpiece))),(((best quality))),(((extremely detailed))),illustration, 1girl,solo,mysteri.png"><br><img src="https://bu.dusays.com/2023/07/20/64b8e87ad7f01.png" alt="00016-854785747-[(Transparent background_1.5)__5],(((masterpiece))),(((best quality))),(((extremely detailed))),illustration, 1girl,solo,mysteri.png"><br><img src="https://bu.dusays.com/2023/07/20/64b8e87ae33d8.png" alt="00011-1786725241-[(Transparent background_1.5)__5],(((masterpiece))),(((best quality))),(((extremely detailed))),illustration, 1girl,solo,mysteri.png"><br><img src="https://bu.dusays.com/2023/07/20/64b8e87ae26d9.png" alt="00015-854785746-[(Transparent background_1.5)__5],(((masterpiece))),(((best quality))),(((extremely detailed))),illustration, 1girl,solo,mysteri.png"><br><img src="https://bu.dusays.com/2023/07/20/64b8e87ad8edf.png" alt="00017-854785748-[(Transparent background_1.5)__5],(((masterpiece))),(((best quality))),(((extremely detailed))),illustration, 1girl,solo,mysteri.png"></p><p>模型：Counterfeit-V3.0.safetensors</p><p>vae：Counterfeit-V2.5.vae.pt</p><p>正向提示词：</p><p>(Overhead view),dynamic angle,ultra-detailed, illustration, close-up, straight on, 1girl, (fantasy:1.4), ((purple eyes)),Her eyes shone like dreamy stars,(glowing eyes:1.233),(beautiful and detailed eyes:1.1),(Silver hair:1.14),(messy hair,very long hair,french braid,hair between eyes,sidelocks), (+(bule hair flower:1.14)),(chiffon dress,bule flower pattern in uniform)&#x2F;&#x3D;(military uniform:1.24),(detached sleeves,wide sleeves),(fingerless gloves),choker,(miko thighhighs),High heeled boots,(expressionless,closed mouth),(standing), (classical Princess boudoir with dressing table<books> and french window<a epic view outside the window> in a white ancient palaces),(white flowers,bloom),(abysmal sea),(flowing water),(a dull blue world tree:1.14),(ruins),(night:1.2),dreamy,soul,(fluorescence),(flying translucent blue butterflies:1.15), [[delicate fingers and hands:0.55]::0.85],(detail fingers),(yubao:0.5),<a href="lora:keqing_lion_optimizer_dim64_loraModel_5e-3noise_token1_4-3-2023:0.7">lora:keqing_lion_optimizer_dim64_loraModel_5e-3noise_token1_4-3-2023:0.7</a>, large breasts,nfs,sexy, perfect body,sit cross-legged and lean against the bookshel, volumetric lighting, multi-color eyes, detailed eyes, hyper detailed,light smile, highly detailed, beautiful, small details, ultra detailed, best quality, intricate, 4k, 8k, trending on artstation, good anatomy, beautiful lighting, award-winning,solo, purple hair, dress, long hair, hair bun, twintails, breasts, bare shoulders, purple eyes, strapless, black dress, bangs, purple nails, strapless dress, cone hair bun, nail polish, ribbon, parted lips, double bun, diamond-shaped pupils, symbol-shaped pupils, cleavage, bow, hair ribbon, diamond (shape), detached collar, hair ornament,symatic dress,</p><p>反向提示词：</p><p>(worst quality, low quality:1.4), monochrome, zombie, (interlocked fingers),</p><p>迭代步数：30</p><p>采样方法：DPM++ 2M Karras</p><p>CFG Scale：7.5</p><p>样图：</p><p><img src="https://bu.dusays.com/2023/07/20/64b90071811dc.png" alt="00033-2013914221-(Overhead view),dynamic angle,ultra-detailed, illustration, close-up, straight on, 1girl, (fantasy_1.4), ((purple eyes)),Her eye.png"><br><img src="https://bu.dusays.com/2023/07/20/64b9007187ede.png" alt="00032-2013914220-(Overhead view),dynamic angle,ultra-detailed, illustration, close-up, straight on, 1girl, (fantasy_1.4), ((purple eyes)),Her eye.png"><br><img src="https://bu.dusays.com/2023/07/20/64b90071a2158.png" alt="00025-2013914213-(Overhead view),dynamic angle,ultra-detailed, illustration, close-up, straight on, 1girl, (fantasy_1.4), ((purple eyes)),Her eye.png"><br><img src="https://bu.dusays.com/2023/07/20/64b900717efbf.png" alt="00024-3582519199-(Overhead view),dynamic angle,ultra-detailed, illustration, close-up, straight on, 1girl, (fantasy_1.4), ((purple eyes)),Her eye.png"><br><img src="https://bu.dusays.com/2023/07/20/64b9007180793.png" alt="00031-2013914219-(Overhead view),dynamic angle,ultra-detailed, illustration, close-up, straight on, 1girl, (fantasy_1.4), ((purple eyes)),Her eye.png"><br><img src="https://bu.dusays.com/2023/07/20/64b90071811dc.png" alt="00026-2013914214-(Overhead view),dynamic angle,ultra-detailed, illustration, close-up, straight on, 1girl, (fantasy_1.4), ((purple eyes)),Her eye.png"></p><p><img src="https://bu.dusays.com/2023/07/20/64b900b9567a1.png" alt="00036-2013914224-(Overhead view),dynamic angle,ultra-detailed, illustration, close-up, straight on, 1girl, (fantasy_1.4), ((purple eyes)),Her eye.png"><br><img src="https://bu.dusays.com/2023/07/20/64b900b97a1f4.png" alt="00028-2013914216-(Overhead view),dynamic angle,ultra-detailed, illustration, close-up, straight on, 1girl, (fantasy_1.4), ((purple eyes)),Her eye.png"><br><img src="https://bu.dusays.com/2023/07/20/64b900b999104.png" alt="00037-2013914225-(Overhead view),dynamic angle,ultra-detailed, illustration, close-up, straight on, 1girl, (fantasy_1.4), ((purple eyes)),Her eye.png"><br><img src="https://bu.dusays.com/2023/07/20/64b900b95ab45.png" alt="00030-2013914218-(Overhead view),dynamic angle,ultra-detailed, illustration, close-up, straight on, 1girl, (fantasy_1.4), ((purple eyes)),Her eye.png"><br><img src="https://bu.dusays.com/2023/07/20/64b900b96316c.png" alt="00027-2013914215-(Overhead view),dynamic angle,ultra-detailed, illustration, close-up, straight on, 1girl, (fantasy_1.4), ((purple eyes)),Her eye.png"><br><img src="https://bu.dusays.com/2023/07/20/64b900b9a5dc2.png" alt="00029-2013914217-(Overhead view),dynamic angle,ultra-detailed, illustration, close-up, straight on, 1girl, (fantasy_1.4), ((purple eyes)),Her eye.png"><br><img src="https://bu.dusays.com/2023/07/20/64b900b966967.png" alt="00034-2013914222-(Overhead view),dynamic angle,ultra-detailed, illustration, close-up, straight on, 1girl, (fantasy_1.4), ((purple eyes)),Her eye.png"><br><img src="https://bu.dusays.com/2023/07/20/64b900b958b97.png" alt="00035-2013914223-(Overhead view),dynamic angle,ultra-detailed, illustration, close-up, straight on, 1girl, (fantasy_1.4), ((purple eyes)),Her eye.png"></p><p>模型：Counterfeit-V3.0.safetensors</p><p>vae：Counterfeit-V2.5.vae.pt</p><p>正向提示词：</p><p>(gorgeous antique furniture background), kawaii cute 1girl dancing, solo, close up, mysterious, vivid color, (glitters, fluorescence flowers in vase, luminous flowers blooming), (glowing light blue eyes), detailed dreamy stars pupils, (delicate blue hair, messy hair, very long hair, French braid, hair between eyes), black headband, light smile, open mouth, [[delicate fingers and hands:0.55]::0.85], (detailed fingers), detailed beautiful skin, off-shoulder shining fluffy (pink dress:1.3), frills, floral print, thigh highs, dynamic angle, dynamic actions, touch lips, volumetric lighting, beautiful lighting, (dim lighting), (classical private room, dressing table, old books, French window in morning, park view outside the window), pictures on wall, clock, fruits basket, (masterpiece, best quality, high resolution, absurdres, intricate details:1.3), illustration, lens perspective, fantasy, feminine, hyper detailed, highly detailed, ultra detailed, small details, trending on artstation, award-winning, good anatomy, <a href="lora:keqing_lion_optimizer_dim64_loraModel_5e-3noise_token1_4-3-2023:0.7">lora:keqing_lion_optimizer_dim64_loraModel_5e-3noise_token1_4-3-2023:0.7</a>, large breasts,nfs,sexy, perfect body,sit cross-legged and lean against the bookshel, volumetric lighting, multi-color eyes, detailed eyes, hyper detailed,light smile, highly detailed, beautiful, small details, ultra detailed, best quality, intricate, 4k, 8k, trending on artstation, good anatomy, beautiful lighting, award-winning,solo, purple hair, dress, long hair, hair bun, twintails, breasts, bare shoulders, purple eyes, strapless, black dress, bangs, purple nails, strapless dress, cone hair bun, nail polish, ribbon, parted lips, double bun, diamond-shaped pupils, symbol-shaped pupils, cleavage, bow, hair ribbon, diamond (shape), detached collar, hair ornament,symatic dress,</p><p>反向提示词：</p><p>(worst quality, low quality:1.4), monochrome, zombie, (interlocked fingers),</p><p>迭代步数：30</p><p>采样方法：DPM++ 2M Karras</p><p>CFG Scale：7.5</p><p>样图：</p><p><img src="https://bu.dusays.com/2023/07/20/64b911937a9af.png" alt="00044-3634599432-(gorgeous antique furniture background), kawaii cute 1girl dancing, solo, close up, mysterious, vivid color, (glitters, fluoresc.png"><br><img src="https://bu.dusays.com/2023/07/20/64b911936c3dd.png" alt="00041-3634599428-(gorgeous antique furniture background), kawaii cute 1girl dancing, solo, close up, mysterious, vivid color, (glitters, fluoresc.png"><br><img src="https://bu.dusays.com/2023/07/20/64b9119382322.png" alt="00046-3634599434-(gorgeous antique furniture background), kawaii cute 1girl dancing, solo, close up, mysterious, vivid color, (glitters, fluoresc.png"><br><img src="https://bu.dusays.com/2023/07/20/64b911937b184.png" alt="00043-3634599431-(gorgeous antique furniture background), kawaii cute 1girl dancing, solo, close up, mysterious, vivid color, (glitters, fluoresc.png"><br><img src="https://bu.dusays.com/2023/07/20/64b911936b4e3.png" alt="00040-3634599427-(gorgeous antique furniture background), kawaii cute 1girl dancing, solo, close up, mysterious, vivid color, (glitters, fluoresc.png"><br><img src="https://bu.dusays.com/2023/07/20/64b911936ad62.png" alt="00042-3634599430-(gorgeous antique furniture background), kawaii cute 1girl dancing, solo, close up, mysterious, vivid color, (glitters, fluoresc.png"><br><img src="https://bu.dusays.com/2023/07/20/64b911938e4ca.png" alt="00045-3634599433-(gorgeous antique furniture background), kawaii cute 1girl dancing, solo, close up, mysterious, vivid color, (glitters, fluoresc.png"><br><img src="https://bu.dusays.com/2023/07/20/64b9119388e2f.png" alt="00039-3634599426-(gorgeous antique furniture background), kawaii cute 1girl dancing, solo, close up, mysterious, vivid color, (glitters, fluoresc.png"></p>]]></content>
      
      
      <categories>
          
          <category> 壁纸 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ai </tag>
            
            <tag> 壁纸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git入门教程</title>
      <link href="/2023/07/20/git/"/>
      <url>/2023/07/20/git/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><strong>git init</strong>:把这个目录变成git可以管理的仓库,目录下会多了一个.git的目录。</p><p>下面以1.txt这个文件为例</p><p><strong>git add 1.txt +git commit -m ‘注释’</strong>:将1.txt这个文件提交给仓库。</p><p><img src="https://bu.dusays.com/2023/07/20/64b8d3a42cc71.png" alt="1.png"></p><p><strong>git status</strong>：查看是否还有文件未提交</p><p><img src="https://bu.dusays.com/2023/07/20/64b8d43a58fbe.png" alt="2.png"></p><p><strong>git diff 1.txt</strong> :看下1.txt文件到底改了什么内容</p><p><strong>git log</strong>：查看历史记录，git log命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是,增加内容为222.如果嫌上面显示的信息太多的话，我们可以使用命令 <strong>git log –pretty&#x3D;oneline</strong>.</p><p><img src="https://bu.dusays.com/2023/07/20/64b8d4c42b507.png" alt="1689834696888.png"></p><p>现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git reset –hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset –hard HEAD~100 即可。</p><p><strong>git reset –hard HEAD^</strong> ：</p><p><img src="https://bu.dusays.com/2023/07/20/64b8d5664dcdd.png" alt="1689834860181.png"></p><p>我们看到 增加22222 内容我们没有看到了，但是现在我想回退到最新的版本，如：有22222的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：</p><p>git reset –hard 版本号 ，但是现在的问题假如我已经关掉过一次命令行或者22222内容的版本号我并不知道呢？要如何知道增加22222内容的版本号呢？可以通过如下命令即可获取到版本号：git reflog 演示如下：</p><p><img src="https://bu.dusays.com/2023/07/20/64b8d5c057245.png" alt="1689834949300.png"></p><p>通过上面的显示我们可以知道，增加内容3333的版本号是 f68b3a5.我们现在可以命令</p><p>git reset –hard  f68b3a5来恢复了。演示如下：</p><p><img src="https://bu.dusays.com/2023/07/20/64b8d5fe25dd8.png" alt="1689835011707.png"></p><h2 id="理解工作区与暂存区的区别？"><a href="#理解工作区与暂存区的区别？" class="headerlink" title="理解工作区与暂存区的区别？"></a><strong>理解工作区与暂存区的区别？</strong></h2><p>工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。<br>版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。</p><p>我们前面说过使用Git提交文件到版本库有两步：</p><p>第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。</p><p>第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。</p><h2 id="Git撤销修改和删除文件操作。"><a href="#Git撤销修改和删除文件操作。" class="headerlink" title="Git撤销修改和删除文件操作。"></a><strong>Git撤销修改和删除文件操作。</strong></h2><p>一：撤销修改：<br>比如我现在在readme.txt文件里面增加一行 内容为555555555555，我们先通过命令查看如下：</p><p>在我未提交之前，我发现添加5555555555555内容有误，所以我得马上恢复以前的版本，现在我可以有如下几种方法可以做修改：</p><p>第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。</p><p>第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset –hard HEAD^</p><p>命令 git checkout –readme.txt 意思就是，把1.txt文件在工作区做的修改全部撤销，这里有2种情况，如下：</p><p>1.1.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。<br>2.另外一种是1.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。<br>对于第二种情况，我想我们继续做demo来看下，假如现在我对1.txt添加一行 内容为6666666666666，我git add 增加到暂存区后，接着添加内容7777777，我想通过撤销命令让其回到暂存区后的状态。</p><p><strong>注意：命令git checkout – readme.txt 中的 – 很重要，如果没有 – 的话，那么命令变成创建分支了。</strong></p><h2 id="Github远程仓库"><a href="#Github远程仓库" class="headerlink" title="Github远程仓库"></a><strong>Github远程仓库</strong></h2><p>前置注册以及配置sshkey步骤跳过。</p><p>在github上创建仓库后页面会有提示，按照提示进行即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/beichengouo/gittest.git</span><br><span class="line"></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/07/20/64b8d96257278.png" alt="1689835878164.png">、</p><p>使用命令git clone克隆一个本地库。</p><p>git clone <a href="https://github.com/beichengouo/gittest.git">https://github.com/beichengouo/gittest.git</a></p><p>总结创建与合并分支命令如下：</p><p>查看分支：git branch</p><p>创建分支：git branch name</p><p>切换分支：git checkout name</p><p>创建+切换分支：git checkout –b name</p><p>合并某分支到当前分支：git merge name</p><p>删除分支：git branch –d name</p><h2 id="git命令大全："><a href="#git命令大全：" class="headerlink" title="git命令大全："></a>git命令大全：</h2><p><strong>一、新建代码库</strong></p><p># 在当前目录新建一个Git代码库<br>$ git init</p><p># 新建一个目录，将其初始化为Git代码库<br>$ git init [project-name] # 下载一个项目和它的整个代码历史<br>$ git clone [url]</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">二、配置</span><br></pre></td></tr></table></figure><p># 显示当前的Git配置<br>$ git config –list</p><p># 编辑Git配置文件<br>$ git config -e [–global] # 设置提交代码时的用户信息<br>$ git config [–global] user.name “[name]”<br>$ git config [–global] user.email “[email address]”</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">三、增加/删除文件</span><br></pre></td></tr></table></figure><p># 添加指定文件到暂存区<br>$ git add [file1] [file2] … # 添加指定目录到暂存区，包括子目录<br>$ git add [dir] # 添加当前目录的所有文件到暂存区<br>$ git add . # 添加每个变化前，都会要求确认 # 对于同一个文件的多处变化，可以实现分次提交<br>$ git add -p</p><p># 删除工作区文件，并且将这次删除放入暂存区<br>$ git rm [file1] [file2] … # 停止追踪指定文件，但该文件会保留在工作区<br>$ git rm –cached [file] # 改名文件，并且将这个改名放入暂存区<br>$ git mv [file-original] [file-renamed]</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">四、代码提交</span><br></pre></td></tr></table></figure><p># 提交暂存区到仓库区<br>$ git commit -m [message] # 提交暂存区的指定文件到仓库区<br>$ git commit [file1] [file2] … -m [message] # 提交工作区自上次commit之后的变化，直接到仓库区<br>$ git commit -a</p><p># 提交时显示所有diff信息<br>$ git commit -v</p><p># 使用一次新的commit，替代上一次提交 # 如果代码没有任何新变化，则用来改写上一次commit的提交信息<br>$ git commit –amend -m [message] # 重做上一次commit，并包括指定文件的新变化<br>$ git commit –amend [file1] [file2] …</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">五、分支</span><br></pre></td></tr></table></figure><p># 列出所有本地分支<br>$ git branch</p><p># 列出所有远程分支<br>$ git branch -r</p><p># 列出所有本地分支和远程分支<br>$ git branch -a</p><p># 新建一个分支，但依然停留在当前分支<br>$ git branch [branch-name] # 新建一个分支，并切换到该分支<br>$ git checkout -b [branch] # 新建一个分支，指向指定commit<br>$ git branch [branch] [commit] # 新建一个分支，与指定的远程分支建立追踪关系<br>$ git branch –track [branch] [remote-branch] # 切换到指定分支，并更新工作区<br>$ git checkout [branch-name] # 切换到上一个分支<br>$ git checkout - # 建立追踪关系，在现有分支与指定的远程分支之间<br>$ git branch –set-upstream [branch] [remote-branch] # 合并指定分支到当前分支<br>$ git merge [branch] # 选择一个commit，合并进当前分支<br>$ git cherry-pick [commit] # 删除分支<br>$ git branch -d [branch-name] # 删除远程分支<br>$ git push origin –delete [branch-name]<br>$ git branch -dr [remote&#x2F;branch]</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">六、标签</span><br></pre></td></tr></table></figure><p># 列出所有tag<br>$ git tag</p><p># 新建一个tag在当前commit<br>$ git tag [tag] # 新建一个tag在指定commit<br>$ git tag [tag] [commit] # 删除本地tag<br>$ git tag -d [tag] # 删除远程tag<br>$ git push origin :refs&#x2F;tags&#x2F;[tagName] # 查看tag信息<br>$ git show [tag] # 提交指定tag<br>$ git push [remote] [tag] # 提交所有tag<br>$ git push [remote] –tags</p><p># 新建一个分支，指向某个tag<br>$ git checkout -b [branch] [tag]</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">七、查看信息</span><br></pre></td></tr></table></figure><p># 显示有变更的文件<br>$ git status</p><p># 显示当前分支的版本历史<br>$ git log</p><p># 显示commit历史，以及每次commit发生变更的文件<br>$ git log –stat</p><p># 搜索提交历史，根据关键词<br>$ git log -S [keyword] # 显示某个commit之后的所有变动，每个commit占据一行<br>$ git log [tag] HEAD –pretty&#x3D;format:%s</p><p># 显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件<br>$ git log [tag] HEAD –grep feature</p><p># 显示某个文件的版本历史，包括文件改名<br>$ git log –follow [file]<br>$ git whatchanged [file] # 显示指定文件相关的每一次diff<br>$ git log -p [file] # 显示过去5次提交<br>$ git log -5 –pretty –oneline</p><p># 显示所有提交过的用户，按提交次数排序<br>$ git shortlog -sn</p><p># 显示指定文件是什么人在什么时间修改过<br>$ git blame [file] # 显示暂存区和工作区的差异<br>$ git diff</p><p># 显示暂存区和上一个commit的差异<br>$ git diff –cached [file] # 显示工作区与当前分支最新commit之间的差异<br>$ git diff HEAD</p><p># 显示两次提交之间的差异<br>$ git diff [first-branch]…[second-branch] # 显示今天你写了多少行代码<br>$ git diff –shortstat “@{0 day ago}” # 显示某次提交的元数据和内容变化<br>$ git show [commit] # 显示某次提交发生变化的文件<br>$ git show –name-only [commit] # 显示某次提交时，某个文件的内容<br>$ git show [commit]:[filename] # 显示当前分支的最近几次提交<br>$ git reflog</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">八、远程同步</span><br></pre></td></tr></table></figure><p># 下载远程仓库的所有变动<br>$ git fetch [remote] # 显示所有远程仓库<br>$ git remote -v</p><p># 显示某个远程仓库的信息<br>$ git remote show [remote] # 增加一个新的远程仓库，并命名<br>$ git remote add [shortname] [url] # 取回远程仓库的变化，并与本地分支合并<br>$ git pull [remote] [branch] # 上传本地指定分支到远程仓库<br>$ git push [remote] [branch] # 强行推送当前分支到远程仓库，即使有冲突<br>$ git push [remote] –force</p><p># 推送所有分支到远程仓库<br>$ git push [remote] –all</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">九、撤销</span><br></pre></td></tr></table></figure><p># 恢复暂存区的指定文件到工作区<br>$ git checkout [file] # 恢复某个commit的指定文件到暂存区和工作区<br>$ git checkout [commit] [file] # 恢复暂存区的所有文件到工作区<br>$ git checkout . # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变<br>$ git reset [file] # 重置暂存区与工作区，与上一次commit保持一致<br>$ git reset –hard</p><p># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变<br>$ git reset [commit] # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致<br>$ git reset –hard [commit] # 重置当前HEAD为指定commit，但保持暂存区和工作区不变<br>$ git reset –keep [commit] # 新建一个commit，用来撤销指定commit # 后者的所有变化都将被前者抵消，并且应用到当前分支<br>$ git revert [commit] # 暂时将未提交的变化移除，稍后再移入<br>$ git stash<br>$ git stash pop</p><p>参考文章：<a href="https://zhuanlan.zhihu.com/p/30044692">Git使用教程,最详细，最傻瓜，最浅显，真正手把手教 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQ机器人3.0更新工作（6/15）</title>
      <link href="/2023/06/13/qbot2/"/>
      <url>/2023/06/13/qbot2/</url>
      
        <content type="html"><![CDATA[<p>本篇博客记录一下个人qbot搭建工作以及后续更新。</p><p>机器人QQ：2468138690</p><p>可直接验证添加</p><h2 id="最近更新："><a href="#最近更新：" class="headerlink" title="最近更新："></a>最近更新：</h2><h3 id="2023-x2F-6-x2F-13"><a href="#2023-x2F-6-x2F-13" class="headerlink" title="2023&#x2F;6&#x2F;13"></a>2023&#x2F;6&#x2F;13</h3><p>1.优化了用户体验，非管理员统一使用猫娘人格，且增加了好感度设定，默认好感度为30，经测试正常询问专业问题不会出错。现在更偏向于日常聊天。</p><p>2.优化了指令表，删减了几个人格，优化了指令说明。</p><p>3.目前私聊bot也会有1&#x2F;2的概率在每个回答后面增加随机表情。</p><p><a href="https://bu.dusays.com/2023/06/13/648875e382857.jpg"><img src="https://bu.dusays.com/2023/06/13/648875e382857.jpg" alt="Screenshot_2023-06-13-21-56-52-491_com.tencent.mo.jpg"></a></p><p>4.优化了在群内的频繁随机回复情况。</p><p><a href="https://bu.dusays.com/2023/06/13/6488763a87c09.jpg"><img src="https://bu.dusays.com/2023/06/13/6488763a87c09.jpg" alt="Screenshot_2023-06-13-21-59-01-570_com.tencent.mo.jpg"></a></p><h3 id="2023-x2F-6-x2F-15（重大更新）"><a href="#2023-x2F-6-x2F-15（重大更新）" class="headerlink" title="2023&#x2F;6&#x2F;15（重大更新）"></a>2023&#x2F;6&#x2F;15（重大更新）</h3><p>机器人模型替换为gpt-3.5-turbo-16k-0613。现已支持联网功能，支持实时搜索互联网最新消息。</p><p><a href="https://bu.dusays.com/2023/06/15/648a9a9aec70f.jpg"><img src="https://bu.dusays.com/2023/06/15/648a9a9aec70f.jpg" alt="Screenshot_2023-06-15-12-48-58-436_com.tencent.mo.jpg"></a></p><h2 id="通知："><a href="#通知：" class="headerlink" title="通知："></a>通知：</h2><p>gpt的apikey的免费余额会在7.1到期，到时候在决定注册账号白嫖还是绑卡支付（绑卡需要国外信用卡，国内visa不可用比较麻烦）。</p><p>云主机会在7&#x2F;7到期，由于云主机必须是国外主机，不好找便宜的（这个是新用户注册有优惠，三个月20r），有推荐的可以d我。</p><p>所以七月份大概率机器人会停运一段时间。</p>]]></content>
      
      
      <categories>
          
          <category> Ai人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07-Java基础知识-异常处理</title>
      <link href="/2023/06/01/java7/"/>
      <url>/2023/06/01/java7/</url>
      
        <content type="html"><![CDATA[<h1 id="Java异常处理"><a href="#Java异常处理" class="headerlink" title="Java异常处理"></a>Java异常处理</h1><p>在Java编程中，异常处理是一种用于处理程序运行时出现的错误情况的机制。异常是指在程序执行过程中发生的意外或异常情况，如输入错误、计算错误、网络连接问题等。通过合理的异常处理机制，可以使程序更加健壮和可靠。</p><h2 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h2><p>Java中的异常分为两种类型：Checked异常和Unchecked异常。</p><ul><li><p>Checked异常：这些异常在代码编译时会被检查，必须在方法的声明中进行声明或捕获。例如，IOException和SQLException就属于Checked异常。</p></li><li><p>Unchecked异常：这些异常在代码编译时不会被检查，也不需要在方法声明中进行声明或捕获。例如，NullPointerException和ArrayIndexOutOfBoundsException就属于Unchecked异常。</p></li></ul><h2 id="异常处理的关键字"><a href="#异常处理的关键字" class="headerlink" title="异常处理的关键字"></a>异常处理的关键字</h2><p>Java提供了一些关键字用于处理异常情况。</p><ul><li>try：包裹可能抛出异常的代码块，并且后面必须跟着catch块或finally块。</li><li>catch：用于捕获异常，并指定相应的处理逻辑。</li><li>finally：用于定义无论是否发生异常都需要执行的代码块。通常用于资源的释放操作，如关闭文件或数据库连接。</li><li>throw：用于抛出异常，可以手动触发异常的发生。</li><li>throws：在方法声明中指定可能抛出的异常，表示该方法可能会出现异常，需要调用该方法的代码进行处理。</li></ul><h2 id="异常处理的示例代码"><a href="#异常处理的示例代码" class="headerlink" title="异常处理的示例代码"></a>异常处理的示例代码</h2><p>下面是一个简单的示例代码，演示了如何使用try-catch-finally来处理异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionHandlingExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 可能抛出异常的代码</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> divide(<span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Result: &quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            <span class="comment">// 捕获并处理异常</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Error: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 无论是否发生异常，都会执行的代码块</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Finally block&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="comment">// 除法运算，可能触发除零异常</span></span><br><span class="line">        <span class="keyword">return</span> a / b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，如果除数为0，则会触发ArithmeticException异常，catch块会捕获该异常并输出错误信息，最后无论是否发生异常，finally块中的代码都会被执行。</p><h2 id="异常处理的最佳实践"><a href="#异常处理的最佳实践" class="headerlink" title="异常处理的最佳实践"></a>异常处理的最佳实践</h2><ul><li><p>使用具体的异常类型进行捕获和处理，避免使用泛化的Exception类型，以便更精确地处理异常情况。</p></li><li><p>捕获异常后，可以选择进行恢复操作、重新抛出异常或记录异常信息等处理方式，具体根据实际需求进行决定。</p></li><li><p>在finally块中进行资源的释放操作，确保资源能够被正确关闭，以避免资源泄漏。</p><ul><li><p>尽量避免在finally块中抛出异常，以免覆盖原始的异常信息。</p></li><li><p>在编写自定义异常类时，应该继承自Exception或其子类，并提供适当的构造方法和异常信息。</p></li><li><p>在处理异常时，可以使用多个catch块来捕获不同类型的异常，并针对每种异常类型进行相应的处理逻辑。</p></li><li><p>使用throws关键字声明可能抛出的异常，以便调用该方法的代码能够进行适当的异常处理。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>异常处理是Java编程中重要的一部分，通过合理的异常处理机制可以提高程序的稳定性和可靠性。在编写代码时，要根据具体的情况选择合适的异常类型进行捕获和处理，并注意资源的释放和异常信息的记录。合理的异常处理能够帮助我们更好地应对各种意外情况，使程序更加健壮和可维护。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06-Java基础知识-字符串</title>
      <link href="/2023/06/01/java6/"/>
      <url>/2023/06/01/java6/</url>
      
        <content type="html"><![CDATA[<h1 id="Java字符串简介"><a href="#Java字符串简介" class="headerlink" title="Java字符串简介"></a>Java字符串简介</h1><p>在Java编程中，字符串是一种常见的数据类型，用于表示文本数据。字符串在Java中是不可变的，这意味着一旦创建了一个字符串对象，就无法改变它的内容。Java提供了丰富的字符串处理功能，使得字符串操作变得简单和高效。</p><h2 id="创建字符串对象"><a href="#创建字符串对象" class="headerlink" title="创建字符串对象"></a>创建字符串对象</h2><p>可以使用两种方式来创建字符串对象：</p><ol><li><p>直接赋值：可以使用双引号（”）将文本括起来，创建一个字符串对象。例如：<code>String str = &quot;Hello, Java!&quot;;</code></p></li><li><p>使用<code>new</code>关键字：可以使用<code>new</code>关键字创建一个字符串对象。例如：<code>String str = new String(&quot;Hello, Java!&quot;);</code></p></li></ol><h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><p>Java提供了丰富的字符串操作方法，可以对字符串进行各种操作，包括：</p><ul><li>连接字符串：可以使用<code>+</code>操作符或<code>concat()</code>方法将多个字符串连接起来。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> str1 + <span class="string">&quot; &quot;</span> + str2; <span class="comment">// 结果为 &quot;Hello Java&quot;</span></span><br></pre></td></tr></table></figure><ul><li>获取字符串长度：可以使用<code>length()</code>方法获取字符串的长度。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello, Java!&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> str.length(); <span class="comment">// 结果为 13</span></span><br></pre></td></tr></table></figure><ul><li>提取子串：可以使用<code>substring()</code>方法提取字符串的子串。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello, Java!&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">subStr</span> <span class="operator">=</span> str.substring(<span class="number">7</span>); <span class="comment">// 结果为 &quot;Java!&quot;</span></span><br></pre></td></tr></table></figure><ul><li>查找子串：可以使用<code>indexOf()</code>方法查找子串在字符串中的位置。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello, Java!&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> str.indexOf(<span class="string">&quot;Java&quot;</span>); <span class="comment">// 结果为 7</span></span><br></pre></td></tr></table></figure><ul><li>替换字符串：可以使用<code>replace()</code>方法替换字符串中的指定内容。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello, Java!&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">newStr</span> <span class="operator">=</span> str.replace(<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;World&quot;</span>); <span class="comment">// 结果为 &quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure><h2 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h2><p>在Java中，可以使用<code>equals()</code>方法或<code>compareTo()</code>方法来比较字符串的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEqual</span> <span class="operator">=</span> str1.equals(str2); <span class="comment">// 结果为 false</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">compareResult</span> <span class="operator">=</span> str1.compareTo(str2); <span class="comment">// 结果为 -32，根据字典顺序比较字符串</span></span><br></pre></td></tr></table></figure><h2 id="字符串的不可变性"><a href="#字符串的不可变性" class="headerlink" title="字符串的不可变性"></a>字符串的不可变性</h2><p>在Java中，字符串是不可变的，这意味着一旦创建了一个字符串对象，就无法改变它的内容。这种特性带来了一些优点，例如字符串的共享和安全性。</p><p>由于字符串是不可变的，对字符串进行修改实际上是创建了一个新的字符串对象。因此，频繁的字符串操作可能会导致性能问题。在需要频繁修改字符串的情况下，可以使用<code>StringBuilder</code>或<code>StringBuffer</code>类来提高性能。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java字符串是一种常见的数据类型，具有丰富的操作方法。它的不可变性使得字符串处理更简单和安全。在日常的</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ai绘画-真人向</title>
      <link href="/2023/05/25/wallpaper4/"/>
      <url>/2023/05/25/wallpaper4/</url>
      
        <content type="html"><![CDATA[<h1 id="Ai绘画分享（真人向）"><a href="#Ai绘画分享（真人向）" class="headerlink" title="Ai绘画分享（真人向）"></a>Ai绘画分享（真人向）</h1><p>来一点小小的Ai震撼</p><p>模型：majicmixRealistic_v4<br><img src="https://bu.dusays.com/2023/05/25/646f6682ec3dd.png" alt="00121-1838010354-1girl wear ruffled apron, best quality, ultra-detailed, masterpiece, finely detail, highres, 8k wallpaper, white skin,,collar,ne.png"></p><p><img src="https://bu.dusays.com/2023/05/25/646f6682edb55.png" alt="00122-1838010355-1girl wear ruffled apron, best quality, ultra-detailed, masterpiece, finely detail, highres, 8k wallpaper, white skin,,collar,ne.png"><br><img src="https://bu.dusays.com/2023/05/25/646f66842563b.png" alt="00111-1134606033-best quality, face focus, soft light, (depth of field) ,ultra high res, (photorealistic_1.4), RAW photo, (upper thigh_1.4) ,(fro.png"><br><img src="https://bu.dusays.com/2023/05/25/646f66844b742.png" alt="00110-2437370096-best quality, face focus, soft light, (depth of field) ,ultra high res, (photorealistic_1.4), RAW photo, (upper thigh_1.4) ,(fro.png"><br><img src="https://bu.dusays.com/2023/05/25/646f6684801b8.png" alt="00107-2615850672-best quality, face focus, soft light, (depth of field) ,ultra high res, (photorealistic_1.4), RAW photo, (portrait_1.4) ,(from f.png"><br><img src="https://bu.dusays.com/2023/05/25/646f66849a1a2.png" alt="00106-1076845754-best quality, face focus, soft light, (depth of field) ,ultra high res, (photorealistic_1.4), RAW photo, (portrait_1.4) ,(from f.png"><br><img src="https://bu.dusays.com/2023/05/25/646f6684ec4c1.png" alt="00104-2432026629-best quality, face focus, soft light, (depth of field) ,ultra high res, (photorealistic_1.4), RAW photo, (portrait_1.4) ,(from f.png"><br><img src="https://bu.dusays.com/2023/05/25/646f6684be49e.png" alt="00105-3251689877-best quality, face focus, soft light, (depth of field) ,ultra high res, (photorealistic_1.4), RAW photo, (portrait_1.4) ,(from f.png"></p>]]></content>
      
      
      <categories>
          
          <category> 壁纸 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ai </tag>
            
            <tag> 壁纸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ai绘画-刻晴</title>
      <link href="/2023/05/24/wallpaper3/"/>
      <url>/2023/05/24/wallpaper3/</url>
      
        <content type="html"><![CDATA[<h1 id="Ai绘画分享（原神-刻晴）"><a href="#Ai绘画分享（原神-刻晴）" class="headerlink" title="Ai绘画分享（原神-刻晴）"></a>Ai绘画分享（原神-刻晴）</h1><p>模型：Counterfeit-V3.0</p><p>Vae：Counterfeit-V2.5</p><p>lora：keqing_lion_optimizer_dim64_loraModel_5e-3noise_token1_4-3-2023</p><p><img src="https://bu.dusays.com/2023/05/24/646e009ceed53.png"></p><p><img src="https://bu.dusays.com/2023/05/24/646e009d2d957.png"></p><p><img src="https://bu.dusays.com/2023/05/24/646e009d533bf.png"></p><p><img src="https://bu.dusays.com/2023/05/24/646e009d7f263.png"></p><p><img src="https://bu.dusays.com/2023/05/24/646e009d5df09.png"></p><p><img src="https://bu.dusays.com/2023/05/24/646e009d8315a.png"></p><p><img src="https://bu.dusays.com/2023/05/24/646e009d8aaec.png"></p><p><img src="https://bu.dusays.com/2023/05/24/646e009d89f48.png"></p><p><img src="https://bu.dusays.com/2023/05/24/646e009d7e32d.png"></p><p><img src="https://bu.dusays.com/2023/05/24/646e009d7f64c.png"></p><p><img src="https://bu.dusays.com/2023/05/24/646e010387e5f.png"></p><p><img src="https://bu.dusays.com/2023/05/24/646e06d624055.png"></p>]]></content>
      
      
      <categories>
          
          <category> 壁纸 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ai </tag>
            
            <tag> 壁纸 </tag>
            
            <tag> 原神 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ai绘画-甘雨</title>
      <link href="/2023/05/24/wallpaper2/"/>
      <url>/2023/05/24/wallpaper2/</url>
      
        <content type="html"><![CDATA[<h1 id="Ai绘画分享（原神-甘雨）"><a href="#Ai绘画分享（原神-甘雨）" class="headerlink" title="Ai绘画分享（原神-甘雨）"></a>Ai绘画分享（原神-甘雨）</h1><p>模型：Counterfeit-V3.0</p><p>Vae：Counterfeit-V2.5</p><p>lora：ganyu2</p><p><img src="https://bu.dusays.com/2023/05/24/646def7349e24.png"></p><p><img src="https://bu.dusays.com/2023/05/24/646def73487c9.png"></p><p><img src="https://bu.dusays.com/2023/05/24/646def734e4a1.png"></p><p><img src="https://bu.dusays.com/2023/05/24/646def7347682.png"></p><p><img src="https://bu.dusays.com/2023/05/24/646def734879f.png"></p><p><img src="https://bu.dusays.com/2023/05/24/646def7351e3a.png"></p><p><img src="https://bu.dusays.com/2023/05/25/646f0dad06532.png" alt="00053-2926857989-((masterpiece, best quality)), close-up, straight on, face focus,((1 girl)), {long hair}, ((small breasts)), standing, hair orna.png"><br><img src="https://bu.dusays.com/2023/05/25/646f0dad7fc0d.png" alt="00088-776441060-(1girl),(solo), ((high resolution)),((Clear and sharp)),(masterpiece_1.5), outdoors ,only 1girl,look at the camera,sky,finely de.png"><br><img src="https://bu.dusays.com/2023/05/25/646f0dad73a7a.png" alt="00091-776441063-(1girl),(solo), ((high resolution)),((Clear and sharp)),(masterpiece_1.5), outdoors ,only 1girl,look at the camera,sky,finely de.png"><br><img src="https://bu.dusays.com/2023/05/25/646f0dad848a5.png" alt="00092-776441064-(1girl),(solo), ((high resolution)),((Clear and sharp)),(masterpiece_1.5), outdoors ,only 1girl,look at the camera,sky,finely de.png"><br><img src="https://bu.dusays.com/2023/05/25/646f0dad9f312.png" alt="00077-1374725258-((masterpiece, best quality)), close-up, straight on, face focus,((1 girl)), {long hair}, ((small breasts)), standing, hair orna.png"><br><img src="https://bu.dusays.com/2023/05/25/646f0dad7ca1e.png" alt="00090-776441062-(1girl),(solo), ((high resolution)),((Clear and sharp)),(masterpiece_1.5), outdoors ,only 1girl,look at the camera,sky,finely de.png"><br><img src="https://bu.dusays.com/2023/05/25/646f0dad7fd07.png" alt="00097-776441069-(1girl),(solo), ((high resolution)),((Clear and sharp)),(masterpiece_1.5), outdoors ,only 1girl,look at the camera,sky,finely de.png"><br><img src="https://bu.dusays.com/2023/05/25/646f0dad747d5.png" alt="00100-776441072-(1girl),(solo), ((high resolution)),((Clear and sharp)),(masterpiece_1.5), outdoors ,only 1girl,look at the camera,sky,finely de.png"><br><img src="https://bu.dusays.com/2023/05/25/646f0dad7e2e7.png" alt="00085-776441057-(1girl),(solo), ((high resolution)),((Clear and sharp)),(masterpiece_1.5), outdoors ,only 1girl,look at the camera,sky,finely de.png"><br><img src="https://bu.dusays.com/2023/05/25/646f0dad88e99.png" alt="00089-776441061-(1girl),(solo), ((high resolution)),((Clear and sharp)),(masterpiece_1.5), outdoors ,only 1girl,look at the camera,sky,finely de.png"><br><img src="https://bu.dusays.com/2023/05/25/646f0daee5b07.png" alt="00071-2934416068-((masterpiece, best quality)), close-up, straight on, face focus,((1 girl)), {long hair}, ((small breasts)), standing, hair orna.png"><br><img src="https://bu.dusays.com/2023/05/25/646f0dae969b2.png" alt="00069-2298563128-((masterpiece, best quality)), close-up, straight on, face focus,((1 girl)), {long hair}, ((medium breasts )), standing, hair or.png"></p>]]></content>
      
      
      <categories>
          
          <category> 壁纸 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ai </tag>
            
            <tag> 壁纸 </tag>
            
            <tag> 原神 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05-Java基础知识-数组</title>
      <link href="/2023/05/17/java5/"/>
      <url>/2023/05/17/java5/</url>
      
        <content type="html"><![CDATA[<h1 id="Java数组介绍"><a href="#Java数组介绍" class="headerlink" title="Java数组介绍"></a>Java数组介绍</h1><p>数组是Java中最常用的数据结构之一，用于存储相同类型的多个元素。数组在Java中具有以下特点：</p><h2 id="1-声明和初始化数组"><a href="#1-声明和初始化数组" class="headerlink" title="1. 声明和初始化数组"></a>1. 声明和初始化数组</h2><p>在Java中，声明数组需要指定数组类型和数组名称，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers; <span class="comment">//声明一个int类型的数组</span></span><br><span class="line">String[] names; <span class="comment">//声明一个String类型的数组</span></span><br></pre></td></tr></table></figure><p>数组的初始化可以通过两种方式进行：</p><h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><p>静态初始化指在声明数组的同时为数组元素赋初值，使用花括号 <code>&#123;&#125;</code> 来指定初始值，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;; <span class="comment">//初始化一个包含5个元素的int数组</span></span><br><span class="line">String[] names = &#123;<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>&#125;; <span class="comment">//初始化一个包含3个元素的String数组</span></span><br></pre></td></tr></table></figure><h3 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h3><p>动态初始化指先声明数组，然后通过 <code>new</code> 关键字为数组分配内存空间，再为数组元素赋值，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>]; <span class="comment">//声明一个包含5个元素的int数组</span></span><br><span class="line">numbers[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">numbers[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">numbers[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">numbers[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">numbers[<span class="number">4</span>] = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h2 id="2-访问数组元素"><a href="#2-访问数组元素" class="headerlink" title="2. 访问数组元素"></a>2. 访问数组元素</h2><p>数组元素可以通过索引来访问，索引从0开始，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">firstNumber</span> <span class="operator">=</span> numbers[<span class="number">0</span>]; <span class="comment">//访问第一个元素</span></span><br><span class="line"><span class="type">String</span> <span class="variable">firstName</span> <span class="operator">=</span> names[<span class="number">0</span>]; <span class="comment">//访问第一个元素</span></span><br></pre></td></tr></table></figure><h2 id="3-数组长度"><a href="#3-数组长度" class="headerlink" title="3. 数组长度"></a>3. 数组长度</h2><p>可以使用 <code>length</code> 属性获取数组的长度，表示数组中元素的个数，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> numbers.length; <span class="comment">//获取数组的长度</span></span><br></pre></td></tr></table></figure><h2 id="4-遍历数组"><a href="#4-遍历数组" class="headerlink" title="4. 遍历数组"></a>4. 遍历数组</h2><p>遍历数组可以使用循环结构，如 <code>for</code> 循环，来访问数组的每个元素，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">    System.out.println(numbers[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-多维数组"><a href="#5-多维数组" class="headerlink" title="5. 多维数组"></a>5. 多维数组</h2><p>Java还支持多维数组，可以用来存储多个元素的表格或矩阵。多维数组可以通过在声明时指定多个维度来创建，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] matrix = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>]; <span class="comment">//声明一个3x3的二维数组</span></span><br></pre></td></tr></table></figure><p>以上是对Java数组的简单介绍，数组在Java中具有重要的作用，可以方便地存储和操作大量相同类型的数据。通过掌握数组的使用方法，可以更好地处理和管理数据。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04-Java基础知识-运算符</title>
      <link href="/2023/05/17/java4/"/>
      <url>/2023/05/17/java4/</url>
      
        <content type="html"><![CDATA[<h1 id="Java运算符简介"><a href="#Java运算符简介" class="headerlink" title="Java运算符简介"></a>Java运算符简介</h1><p>在Java编程语言中，运算符用于执行各种操作，包括算术、赋值、比较和逻辑等。了解和正确使用这些运算符是编写高效和功能强大的Java程序的基础。</p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>算术运算符用于执行基本的数学运算，例如加法、减法、乘法和除法。以下是常用的算术运算符：</p><ul><li>加法运算符（+）：用于将两个值相加。</li><li>减法运算符（-）：用于将一个值减去另一个值。</li><li>乘法运算符（*）：用于将两个值相乘。</li><li>除法运算符（&#x2F;）：用于将一个值除以另一个值。</li><li>取余运算符（%）：用于计算两个值相除的余数。</li></ul><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>赋值运算符用于将一个值赋给一个变量。常见的赋值运算符是等号（&#x3D;），它将右边的值赋给左边的变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 将值10赋给变量x</span></span><br></pre></td></tr></table></figure><p>除了等号之外，还有一些复合赋值运算符，例如加等（+&#x3D;）、减等（-&#x3D;）、乘等（*&#x3D;）和除等（&#x2F;&#x3D;）。这些复合赋值运算符将右边的值与左边的变量进行运算，并将结果赋给左边的变量。</p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>比较运算符用于比较两个值之间的关系，并返回一个布尔值（true或false）。以下是常用的比较运算符：</p><ul><li>相等运算符（&#x3D;&#x3D;）：用于检查两个值是否相等。</li><li>不等运算符（!&#x3D;）：用于检查两个值是否不相等。</li><li>大于运算符（&gt;）：用于检查左边的值是否大于右边的值。</li><li>小于运算符（&lt;）：用于检查左边的值是否小于右边的值。</li><li>大于等于运算符（&gt;&#x3D;）：用于检查左边的值是否大于或等于右边的值。</li><li>小于等于运算符（&lt;&#x3D;）：用于检查左边的值是否小于或等于右边的值。</li></ul><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符用于执行逻辑运算，例如逻辑与（&amp;&amp;）、逻辑或（||）和逻辑非（!）。这些运算符通常用于条件语句和循环结构中。</p><ul><li>逻辑与（&amp;&amp;）：当两个条件都为真时，返回真。</li><li>逻辑或（||）：当至少有一个条件为真时，返回真。</li><li>逻辑非（!）：对条件的结果进行取反。</li></ul><h2 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h2><p>除了上述提到的运算符外，还有一些其他常见的运算符，包括：</p><ul><li>自增运算符（++）：用于将变量的值增加1。</li><li>自减运算符（–）：用于将变量的值减少1。</li><li>条件运算符（三元运算符）（? :）：用于根据条件选择不同的值。</li><li>位运算符：用于对数据的位进行操作，例如按位与（&amp;）、按位或（|）、按位异或（^）等。</li><li>移位运算符：用于对数据的位进行移动操作，例如左移（&lt;&lt;）、右移（&gt;&gt;）等。</li><li>instanceof运算符：用于检查对象是否是指定类型的实例。</li><li>强制类型转换运算符：用于将一个数据类型转换为另一个数据类型。</li></ul><p>了解和掌握这些运算符的使用方法和规则，能够帮助我们进行复杂的计算和逻辑操作，提高程序的灵活性和效率。</p><p>以上是Java中一些常见的运算符的简要介绍，通过灵活运用这些运算符，我们可以编写出功能丰富且高效的Java程序。在实际编程中，根据具体需求和场景选择合适的运算符是非常重要的。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03-Java基础知识-数据类型</title>
      <link href="/2023/05/12/java3/"/>
      <url>/2023/05/12/java3/</url>
      
        <content type="html"><![CDATA[<h1 id="Java数据类型"><a href="#Java数据类型" class="headerlink" title="Java数据类型"></a>Java数据类型</h1><p>Java是一门强类型语言，变量必须先声明并指定数据类型，然后才能进行使用。Java提供了八种基本数据类型和引用类型，本文将简单介绍Java的数据类型。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Java的八种基本数据类型分为四类，分别是整型、浮点型、字符型和布尔型。</p><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p>整型包括四种类型，分别是<code>byte</code>、<code>short</code>、<code>int</code>和<code>long</code>。它们分别占用1、2、4和8个字节，表示的范围也不同，如下表所示：</p><table><thead><tr><th>数据类型</th><th>占用字节数</th><th>表示范围</th></tr></thead><tbody><tr><td>byte</td><td>1</td><td>-128 ~ 127</td></tr><tr><td>short</td><td>2</td><td>-32768 ~ 32767</td></tr><tr><td>int</td><td>4</td><td>-2147483648 ~ 2147483647</td></tr><tr><td>long</td><td>8</td><td>-9223372036854775808 ~ 9223372036854775807</td></tr></tbody></table><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p>浮点型包括两种类型，分别是<code>float</code>和<code>double</code>。它们分别占用4和8个字节，表示的范围也不同，如下表所示：</p><table><thead><tr><th>数据类型</th><th>占用字节数</th><th>表示范围</th></tr></thead><tbody><tr><td>float</td><td>4</td><td>1.4E-45 ~ 3.4028235E+38</td></tr><tr><td>double</td><td>8</td><td>4.9E-324 ~ 1.797693134E+308</td></tr></tbody></table><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p>字符型只有一种类型，即<code>char</code>。它占用2个字节，可以表示所有Unicode字符，表示范围为0 ~ 65535。</p><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><p>布尔型只有一种类型，即<code>boolean</code>。它只有两个取值，分别为<code>true</code>和<code>false</code>，占用1个字节。</p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>Java的引用类型指除了基本数据类型之外的类型，包括类、接口、数组等。引用类型变量存储的是对象的地址，而不是对象本身。引用类型变量的默认值为<code>null</code>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文简单介绍了Java的八种基本数据类型和引用类型。在实际开发中，我们需要根据需求选择适当的数据类型，以免浪费内存或出现数据精度等问题。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-Java基础知识-简介</title>
      <link href="/2023/05/12/java1/"/>
      <url>/2023/05/12/java1/</url>
      
        <content type="html"><![CDATA[<h1 id="Java简介"><a href="#Java简介" class="headerlink" title="Java简介"></a>Java简介</h1><p>Java是一种面向对象的编程语言，由Sun Microsystems在1995年推出。Java的特点是跨平台、简单易学、安全可靠、支持多线程、面向对象等，这些特点使得Java成为了全球最受欢迎的编程语言之一。</p><h2 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h2><p>Java的跨平台性是由其虚拟机（JVM）实现的。Java程序在编译之后会生成一种特殊的字节码格式，这种字节码可以在任何能够运行Java虚拟机的平台上执行。这意味着，一次编译可以在不同的操作系统和计算机上运行，避免了因为操作系统或硬件的差异而导致的不兼容性问题。</p><h2 id="简单易学"><a href="#简单易学" class="headerlink" title="简单易学"></a>简单易学</h2><p>Java的语法与C++和C语言比较相似，但是相对来说更加简单。Java取消了一些C++中比较复杂的特性，如指针、多继承等。同时，Java还提供了很多高级特性，如自动内存管理、垃圾回收、异常处理等，这些特性都大大减轻了开发人员的工作量，降低了出错的概率。</p><h2 id="安全可靠"><a href="#安全可靠" class="headerlink" title="安全可靠"></a>安全可靠</h2><p>Java提供了很多安全机制，如安全沙箱、类加载器等，这些机制都可以保证Java程序的安全性。Java也提供了一些强制类型检查、空指针检查等功能，这些功能也有助于减少程序中的错误。</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>Java提供了丰富的多线程机制，允许开发人员使用多线程来充分利用多核CPU，提高程序的执行效率。Java的多线程机制包括线程类、线程同步、线程池等。</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>Java是一种面向对象的编程语言，所有的Java程序都是由对象组成的。Java的面向对象机制包括类、对象、封装、继承、多态等。面向对象的编程思想能够提高程序的可维护性、可扩展性、可重用性。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java作为一种跨平台、简单易学、安全可靠、支持多线程、面向对象等的编程语言，应用广泛。Java在各种领域中都有广泛的应用，如Web开发、移动应用开发、桌面应用开发、大数据处理等。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-Java基础知识-变量</title>
      <link href="/2023/05/12/java2/"/>
      <url>/2023/05/12/java2/</url>
      
        <content type="html"><![CDATA[<h1 id="Java中的变量"><a href="#Java中的变量" class="headerlink" title="Java中的变量"></a>Java中的变量</h1><p>在Java编程中，变量是存储数据的最基本的单元。变量可以保存各种类型的数据，如整数、浮点数、字符、字符串等等。本文将介绍Java中的变量类型、命名规则和作用域等方面的内容。</p><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p>Java中的变量可以分为以下几种类型：</p><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><p>Java中的基本类型有8种，分别为：</p><ul><li>byte：1字节，范围为-128 ~ 127。</li><li>short：2字节，范围为-32768 ~ 32767。</li><li>int：4字节，范围为-2147483648 ~ 2147483647。</li><li>long：8字节，范围为-9223372036854775808 ~ 9223372036854775807。</li><li>float：4字节，范围为1.4E-45 ~ 3.4028235E38。</li><li>double：8字节，范围为4.9E-324 ~ 1.7976931348623157E308。</li><li>char：2字节，范围为0 ~ 65535。</li><li>boolean：1位，只有两个值：true和false。</li></ul><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>Java中的引用类型指的是对象，这些对象在堆中分配，变量在栈中存储一个引用指向堆中的对象。Java中的引用类型有类、接口、数组、枚举等等。</p><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><p>Java中的变量名必须满足以下规则：</p><ul><li>变量名必须以字母、下划线（_）或美元符号（$）开始。</li><li>变量名不能以数字开头。</li><li>变量名只能包含字母、数字、下划线或美元符号。</li><li>变量名区分大小写。</li><li>变量名不能是Java关键字和保留字。</li></ul><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>Java中的变量有不同的作用域。变量的作用域指的是变量在程序中可见的范围。在Java中，变量的作用域可以分为以下几种：</p><h3 id="类变量（静态变量）"><a href="#类变量（静态变量）" class="headerlink" title="类变量（静态变量）"></a>类变量（静态变量）</h3><p>类变量是定义在类中的静态变量。这些变量被所有该类的对象共享。在类的定义中使用static关键字定义。</p><h3 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h3><p>实例变量是定义在类中，但在方法、语句块或构造函数之外的变量。每个对象都有一份实例变量的副本。</p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>局部变量是定义在方法、语句块或构造函数中的变量。这些变量只在方法、语句块或构造函数中有效。</p><h2 id="变量的声明和初始化"><a href="#变量的声明和初始化" class="headerlink" title="变量的声明和初始化"></a>变量的声明和初始化</h2><p>Java中的变量需要先声明后使用。声明变量时需要指定变量的类型，变量名以及作用域。变量的初始化指的是为变量赋初值。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教程 使用hexo搭建属于自己的blog</title>
      <link href="/2023/05/10/blogcourse/"/>
      <url>/2023/05/10/blogcourse/</url>
      
        <content type="html"><![CDATA[<h3 id="教程比较简单，大概半小时就可以搭建完成雏形，且不需要自己的服务器就可以部署。"><a href="#教程比较简单，大概半小时就可以搭建完成雏形，且不需要自己的服务器就可以部署。" class="headerlink" title="教程比较简单，大概半小时就可以搭建完成雏形，且不需要自己的服务器就可以部署。"></a>教程比较简单，大概半小时就可以搭建完成雏形，且不需要自己的服务器就可以部署。</h3><h3 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h3><p>注册一个自己的github账号：<a href="https://github.com/">github官网</a>。进不去的话应该要用魔法。</p><p>注册登入github</p><p>点击Create a new repository新建一个仓库</p><p>repository name输入：你的用户名.github.io（注意不要随便给仓库取名，否则会导致后续配置很麻烦）</p><p>勾选Public</p><p>勾选 Add a README file</p><p>拉到下面点击create repository创建 </p><h3 id="开始阶段："><a href="#开始阶段：" class="headerlink" title="开始阶段："></a>开始阶段：</h3><h5 id="下载node-js和git："><a href="#下载node-js和git：" class="headerlink" title="下载node.js和git："></a>下载node.js和git：</h5><p><a href="https://node.jsnodejs.org/en/">https://Node.jsnodejs.org/en/</a></p><p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>安装下载教程均可在网上找到，这里不再提供。</p><h5 id="下载hexo"><a href="#下载hexo" class="headerlink" title="下载hexo:"></a>下载hexo:</h5><p>打开cmd输入下列命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h5 id="生成SSH-Keys："><a href="#生成SSH-Keys：" class="headerlink" title="生成SSH Keys："></a>生成SSH Keys：</h5><p>随便找个文件夹右键（win11需要右键后点显示更多选项），然后选git bush  here，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮件地址&quot; </span><br></pre></td></tr></table></figure><p>然后连续按四次回车</p><p>然后用记事本打开C:&#x2F;Users&#x2F;用户名&#x2F;.ssh下的id_rsa.pub，复制里面的代码</p><p>打开github，右上角头像-&gt;setting-&gt;SSH and GPG keys-&gt;新建SSH keys，名称随意，在下面粘贴代码</p><p>随便找个文件夹右键（win11需要右键后点显示更多选项），然后选git bush  here，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>回车，然后再输入yes。</p><h4 id="本地创建博客："><a href="#本地创建博客：" class="headerlink" title="本地创建博客："></a>本地创建博客：</h4><p>找一个地方新建一个文件夹，用来放你的博客文件。在文件夹里git bush  here，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>然后管理员运行cmd，用cmd进入你刚才的博客文件夹</p><p>比如你在E盘创建了一个blog文件夹就在cmd中输入</p><p>E：  回车</p><p>cd blog</p><p>就进去了</p><p>然后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo install</span><br></pre></td></tr></table></figure><p>等下载完成后再回到Git bash</p><p>依次输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>现在就可以复制生成的链接进入浏览器就可以看到博客了</p><p>然后按ctrl+c停止运行</p><h4 id="上传："><a href="#上传：" class="headerlink" title="上传："></a>上传：</h4><p>去github之前生成的仓库页面点code，复制https的链接</p><p>进入之前的Blog文件夹，用记事本打开_config.yml</p><p>拉到最下面将deploy替换为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:  </span><br><span class="line">  type: git</span><br><span class="line">  repository: 你复制的https的链接</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><h5 id="注意：每行前面都有两个空格不要删，每个冒号后面都有个空格也不要删！不然就会报错。如果运行出错网上找个yml格式文件语法在线检测的网站查一查哪里有问题"><a href="#注意：每行前面都有两个空格不要删，每个冒号后面都有个空格也不要删！不然就会报错。如果运行出错网上找个yml格式文件语法在线检测的网站查一查哪里有问题" class="headerlink" title="注意：每行前面都有两个空格不要删，每个冒号后面都有个空格也不要删！不然就会报错。如果运行出错网上找个yml格式文件语法在线检测的网站查一查哪里有问题"></a>注意：每行前面都有两个空格不要删，每个冒号后面都有个空格也不要删！不然就会报错。如果运行出错网上找个yml格式文件语法在线检测的网站查一查哪里有问题</h5><p>保存退出</p><p>和之前一样管理员运行cmd然后进入Blog文件夹</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后在Blog文件夹右键打开git bash，依次输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>然后在跳出来的窗口内进行登录</p><p>接下来我们就成功把本地内容上传到github了</p><p>上传成功后就可以在网上查看自己的博客了</p><p>网址是我们之前设的仓库名：你的用户名.github.io </p><h4 id="文章更新："><a href="#文章更新：" class="headerlink" title="文章更新："></a>文章更新：</h4><p>在 你的博客文件夹&#x2F;source&#x2F;_post文件夹下写md文件，格式可以参考默认就有的一个hello-world.md。</p><p>然后 在博客文件夹根目录git bash here</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g </span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>上传就行了</p><h4 id="主题："><a href="#主题：" class="headerlink" title="主题："></a>主题：</h4><p>默认的是landscape主题 可以在<a href="https://hexo.io/themes/">Hexo官网</a>上找一些其他好看的主题。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blog更新工作进展(2023/5/10)</title>
      <link href="/2023/05/10/blog4/"/>
      <url>/2023/05/10/blog4/</url>
      
        <content type="html"><![CDATA[<p>本篇博客记录一下本站搭建工作以及后续更新。</p><h2 id="更新记录："><a href="#更新记录：" class="headerlink" title="更新记录："></a>更新记录：</h2><h3 id="2023-x2F-5-x2F-10："><a href="#2023-x2F-5-x2F-10：" class="headerlink" title="2023&#x2F;5&#x2F;10："></a>2023&#x2F;5&#x2F;10：</h3><p>1.增加了分类和tag（标签）页面。</p><p>2.更改了首页图片，换了张小的，加载更快一点。</p><p>3.增加了友情链接页面。</p><p>4.增加了图片gallery。</p><h2 id="目前bug（2023-x2F-5-x2F-9）："><a href="#目前bug（2023-x2F-5-x2F-9）：" class="headerlink" title="目前bug（2023&#x2F;5&#x2F;9）："></a>目前bug（2023&#x2F;5&#x2F;9）：</h2><p>暂无。</p><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><p>有时候进不了网站可能正在修bug，过段时间清理一下缓存就可以进来了，如果还进不去大概率是我还正在修bug。</p>]]></content>
      
      
      <categories>
          
          <category> blog更新日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>碧蓝档案壁纸</title>
      <link href="/2023/05/10/wallpaper/"/>
      <url>/2023/05/10/wallpaper/</url>
      
        <content type="html"><![CDATA[<h1 id="碧蓝档案壁纸分享"><a href="#碧蓝档案壁纸分享" class="headerlink" title="碧蓝档案壁纸分享"></a>碧蓝档案壁纸分享</h1><p><img src="https://bu.dusays.com/2023/05/10/645b298f3371d.png"></p><p><img src="https://bu.dusays.com/2023/05/10/645b298f3371d.jpg"></p><p><img src="https://bu.dusays.com/2023/05/10/645b298f6ac22.png"></p><p><img src="https://bu.dusays.com/2023/05/10/645b29909ad64.jpg"></p><p><img src="https://bu.dusays.com/2023/05/10/645b2990ae369.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 壁纸 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 壁纸 </tag>
            
            <tag> 碧蓝档案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blog更新工作进展(2023/5/9)</title>
      <link href="/2023/05/09/blog3/"/>
      <url>/2023/05/09/blog3/</url>
      
        <content type="html"><![CDATA[<p>本篇博客记录一下本站搭建工作以及后续更新。</p><h2 id="更新记录："><a href="#更新记录：" class="headerlink" title="更新记录："></a>更新记录：</h2><h3 id="2023-x2F-5-x2F-9："><a href="#2023-x2F-5-x2F-9：" class="headerlink" title="2023&#x2F;5&#x2F;9："></a>2023&#x2F;5&#x2F;9：</h3><p>1.新增了留言板功能。</p><p><img src="/img/1/07.png" alt="07"></p><p>2.添加了Waline评论系统。（不是）</p><p>（在尝试修复国内无法看到评论的bug后，我成功的把原来的waline整个东西搞没了，后续又折腾了好久没折腾回来）</p><p>然后我改用twikoo了，已正常使用。评论被回复后会有邮件提醒（推荐使用qq邮箱，可以获取qq头像）</p><h2 id="目前bug（2023-x2F-5-x2F-9）："><a href="#目前bug（2023-x2F-5-x2F-9）：" class="headerlink" title="目前bug（2023&#x2F;5&#x2F;9）："></a>目前bug（2023&#x2F;5&#x2F;9）：</h2><p>暂无。</p><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><p>有时候进不了网站可能正在修bug，过段时间清理一下缓存就可以进来了，如果还进不去大概率是我还正在修bug。</p>]]></content>
      
      
      <categories>
          
          <category> blog更新日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用资源分享(百度云)</title>
      <link href="/2023/05/08/ziyuan/"/>
      <url>/2023/05/08/ziyuan/</url>
      
        <content type="html"><![CDATA[<h2 id="资源分享："><a href="#资源分享：" class="headerlink" title="资源分享："></a>资源分享：</h2><h3 id="学习向："><a href="#学习向：" class="headerlink" title="学习向："></a>学习向：</h3><h4 id="stable-diffusion-Ai绘画整合包-本体＋启动器（搬运自b站秋叶大佬）："><a href="#stable-diffusion-Ai绘画整合包-本体＋启动器（搬运自b站秋叶大佬）：" class="headerlink" title="stable diffusion Ai绘画整合包 本体＋启动器（搬运自b站秋叶大佬）："></a>stable diffusion Ai绘画整合包 本体＋启动器（搬运自b站秋叶大佬）：</h4><p>链接：<a href="https://pan.baidu.com/s/1uFTOOSM4bgbM4pKuWypiMA?pwd=iwye">https://pan.baidu.com/s/1uFTOOSM4bgbM4pKuWypiMA?pwd=iwye</a><br>提取码：iwye </p><p>链接：<a href="https://pan.baidu.com/s/155E1lciEzsAy1qxeP202Ww?pwd=72ir">https://pan.baidu.com/s/155E1lciEzsAy1qxeP202Ww?pwd=72ir</a><br>提取码：72ir </p><h4 id="windows虚拟机（vmware-含破解工具）："><a href="#windows虚拟机（vmware-含破解工具）：" class="headerlink" title="windows虚拟机（vmware 含破解工具）："></a>windows虚拟机（vmware 含破解工具）：</h4><p>链接：<a href="https://pan.baidu.com/s/1qinNHNP6vMQmvMCgcML2mA?pwd=hzki">https://pan.baidu.com/s/1qinNHNP6vMQmvMCgcML2mA?pwd=hzki</a><br>提取码：hzki </p><h4 id="adobe全套工具（含ps，pr等等全家桶）："><a href="#adobe全套工具（含ps，pr等等全家桶）：" class="headerlink" title="adobe全套工具（含ps，pr等等全家桶）："></a>adobe全套工具（含ps，pr等等全家桶）：</h4><p>链接：<a href="https://pan.baidu.com/s/1dEFKg6QtHqb4MDCvVvA8VQ?pwd=olah">https://pan.baidu.com/s/1dEFKg6QtHqb4MDCvVvA8VQ?pwd=olah</a><br>提取码：olah </p><h3 id="娱乐向："><a href="#娱乐向：" class="headerlink" title="娱乐向："></a>娱乐向：</h3><h4 id="口袋妖怪究极绿宝石5-4："><a href="#口袋妖怪究极绿宝石5-4：" class="headerlink" title="口袋妖怪究极绿宝石5.4："></a>口袋妖怪究极绿宝石5.4：</h4><p>链接：<a href="https://pan.baidu.com/s/12nM4lRPTVcWt5KoOuiYZfQ?pwd=zuiz">https://pan.baidu.com/s/12nM4lRPTVcWt5KoOuiYZfQ?pwd=zuiz</a><br>提取码：zuiz </p><h4 id="心灵终结3-36："><a href="#心灵终结3-36：" class="headerlink" title="心灵终结3.36："></a>心灵终结3.36：</h4><p>链接：<a href="https://pan.baidu.com/s/1zL1hzm_qUDX8Xsmv0Q_LFg?pwd=87ma">https://pan.baidu.com/s/1zL1hzm_qUDX8Xsmv0Q_LFg?pwd=87ma</a><br>提取码：87ma </p><p>大部分3a游戏我都有资源，如死亡搁浅、地铁离去等等，这里因为不方便分享，如有需要可以联系我。（其实就是以前买过专门做破解版游戏网站的永久会员，游戏挺全的）</p><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><p>资源均为百度云网盘，如果资源失效可以联系我补。</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ai绘画 《无人之城与少女》</title>
      <link href="/2023/05/08/aihuihua/"/>
      <url>/2023/05/08/aihuihua/</url>
      
        <content type="html"><![CDATA[<h2 id="《无人之城与少女》"><a href="#《无人之城与少女》" class="headerlink" title="《无人之城与少女》"></a>《无人之城与少女》</h2><div align=center class="aspect-ratio"><iframe src="//player.bilibili.com/player.html?aid=226741779&bvid=BV1th411V7S9&cid=1072864481&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div>]]></content>
      
      
      <categories>
          
          <category> Ai人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blog更新工作进展(2023/5/8)</title>
      <link href="/2023/05/08/blog2/"/>
      <url>/2023/05/08/blog2/</url>
      
        <content type="html"><![CDATA[<p>本篇博客记录一下本站搭建工作以及后续更新。</p><h2 id="更新记录："><a href="#更新记录：" class="headerlink" title="更新记录："></a>更新记录：</h2><h3 id="2023-x2F-5-x2F-8："><a href="#2023-x2F-5-x2F-8：" class="headerlink" title="2023&#x2F;5&#x2F;8："></a>2023&#x2F;5&#x2F;8：</h3><p>1.搜索功能已修复，可以正常使用</p><p><img src="/img/1/04.png" alt="04"></p><p>2.增加了全程吸底的音乐播放器</p><p><img src="/img/1/05.png" alt="05"></p><p>3.适配了b站视频。</p><p>4.增加alice挂件(pc端才有)，alice女儿可爱捏。</p><p><img src="/img/1/06.png" alt="06"></p><h2 id="目前bug（2023-x2F-5-x2F-8）："><a href="#目前bug（2023-x2F-5-x2F-8）：" class="headerlink" title="目前bug（2023&#x2F;5&#x2F;8）："></a>目前bug（2023&#x2F;5&#x2F;8）：</h2><p>加载动画仍有问题，不打算用加载动画了。</p><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><p>有时候进不了网站可能正在修bug，过段时间清理一下缓存就可以进来了，如果还进不去大概率是我还正在修bug。</p>]]></content>
      
      
      <categories>
          
          <category> blog更新日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blog更新工作进展(2023/5/7)</title>
      <link href="/2023/05/07/blog/"/>
      <url>/2023/05/07/blog/</url>
      
        <content type="html"><![CDATA[<p>本篇博客记录一下本站搭建工作以及后续更新。</p><h2 id="更新记录："><a href="#更新记录：" class="headerlink" title="更新记录："></a>更新记录：</h2><h3 id="2023-x2F-5-x2F-7："><a href="#2023-x2F-5-x2F-7：" class="headerlink" title="2023&#x2F;5&#x2F;7："></a>2023&#x2F;5&#x2F;7：</h3><p>1.绑定个人域名beichengouo.top。</p><p>2.pc端网站背景增加动态彩带特效。</p><p>3.新增搜索功能：</p><p><img src="/img/1/04.png" alt="04"></p><p>4.调整了网页整体布局。</p><p>5.更新了相册。</p><p>6.增加了文章封面和tags，调整了文章顺序，增加了置顶文章。</p><h2 id="目前bug（2023-x2F-5-x2F-7）："><a href="#目前bug（2023-x2F-5-x2F-7）：" class="headerlink" title="目前bug（2023&#x2F;5&#x2F;7）："></a>目前bug（2023&#x2F;5&#x2F;7）：</h2><p>本地端搜索栏显示正常，部署到服务器上会显示在最底下，折腾了一下午暂时无法解决。大概率是github作为服务器加载外部网站上的js和css加载太慢了的问题。应该部署到自己服务器上不会出错。目前暂时把搜索和加载动画功能关闭了。</p><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><p>有时候进不了网站可能正在修bug，过段时间清理一下缓存就可以进来了，如果还进不去大概率是我还正在修bug。</p>]]></content>
      
      
      <categories>
          
          <category> blog更新日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQ机器人2.0更新工作（5/5）</title>
      <link href="/2023/05/05/qbot/"/>
      <url>/2023/05/05/qbot/</url>
      
        <content type="html"><![CDATA[<p>本篇博客记录一下个人qbot搭建工作以及后续更新。qbot搭建具体步骤参考b站呆呆木的教程。在原版基础上做了很多更新，加了很多内容，机器人qq：2468138690（自动加好友），已部署在海外服务器上，秒回复，标注❤️的则为原版没有的内容。</p><h2 id="当前机器人功能游览"><a href="#当前机器人功能游览" class="headerlink" title="当前机器人功能游览"></a>当前机器人功能游览</h2><h3 id="管理员指令表："><a href="#管理员指令表：" class="headerlink" title="管理员指令表："></a>管理员指令表：</h3><p><img src="/img/1/01.png" alt="01"></p><h3 id="用户（非管理）指令："><a href="#用户（非管理）指令：" class="headerlink" title="用户（非管理）指令："></a>用户（非管理）指令：</h3><p><img src="/img/1/02.png" alt="02"></p><h3 id="指令功能介绍："><a href="#指令功能介绍：" class="headerlink" title="指令功能介绍："></a>指令功能介绍：</h3><p>重置会话：重置当前会话。</p><p>指令说明：回复指令说明大全，目前因账号被风控无法在qq群内回复指令大全，私聊正常。</p><p>设置人格：设置gpt初始人格。格式如 设置人格 xxxxxx（描述）</p><p>语音开启&#x2F;关闭：开启&#x2F;关闭语音回复。</p><p>拉黑&#x2F;解除：拉黑指定qq号直至解除或者服务器重启，拉黑后机器人将不会对指定qq进行回复。❤️</p><p>私人模式：开启后非管理无法与机器人对话。❤️</p><p>变xxx：切换对应预置人格。❤️</p><p>醒醒&#x2F;昏睡：醒醒后机器人会在群内随机回复群友的话，初始概率为1&#x2F;3，通过高冷一点&#x2F;呆萌一点命令可以调整回复概率，昏睡开启后机器人将不会随机回复。❤️</p><p>设备信息：显示服务器各参数详细信息。❤️</p><p>磁盘信息：显示服务器磁盘内存信息。❤️</p><p>拉黑检测：检测到指定敏感关键词将自动拉黑对方。❤️</p><p>初始自动检测：第一次对话将自动识别非管理和管理用户。用于加载不同初始设置（比如加载不同人格）。❤️</p><h2 id="最近更新："><a href="#最近更新：" class="headerlink" title="最近更新："></a>最近更新：</h2><h3 id="2023-x2F-5-x2F-1"><a href="#2023-x2F-5-x2F-1" class="headerlink" title="2023&#x2F;5&#x2F;1"></a>2023&#x2F;5&#x2F;1</h3><p>1.机器人新增了发表情的功能，每一次回复有1&#x2F;3概率在后面增加表情。❤️</p><p><img src="/img/1/03.png" alt="03"></p><p>2.修复了切换人格后第一句对话不理人的情况。</p><p>3.优化了回复概率问题。</p><p>4.优化了预置人格，在每句话前增加了时间（每句话都告诉gpt当前时间）。</p>]]></content>
      
      
      <categories>
          
          <category> Ai人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/05/hello-world/"/>
      <url>/2023/05/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>本博客使用 <a href="https://hexo.io/">Hexo</a>制作! 这是我的第一篇文章. 查看 <a href="https://hexo.io/docs/">文档</a> 获得更多信息. 如果你在使用Hexo中遇到任何问题，你可以在 <a href="https://hexo.io/docs/troubleshooting.html">故障排除</a> 中找到答案， 或者你可以在 <a href="https://github.com/hexojs/hexo/issues">GitHub</a>上问我.</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="命令：Create-a-new-post"><a href="#命令：Create-a-new-post" class="headerlink" title="命令：Create a new post"></a>命令：Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="命令：Run-server"><a href="#命令：Run-server" class="headerlink" title="命令：Run server"></a>命令：Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="命令：Generate-static-files"><a href="#命令：Generate-static-files" class="headerlink" title="命令：Generate static files"></a>命令：Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="命令：Deploy-to-remote-sites"><a href="#命令：Deploy-to-remote-sites" class="headerlink" title="命令：Deploy to remote sites"></a>命令：Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> blog更新日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
